const express = require("express")
const bodyParser = require("body-parser")
const app = express()
const multer = require("multer")//upload file
const path = require("path")//memanggil path direktori
const fs = require("fs")//manajemen file
const mysql = require("mysql")
const cors = require("cors")
const md5 = require("md5")
const Cryptr = require("cryptr")
const cryptr = new Cryptr("909090909090")

var dateTime = require('node-datetime');
var dt = dateTime.create();
var formatDatetime = dt.format('Y-m-d H:M:S');

app.use(express.static(__dirname))
app.use(express.json())
app.use(express.urlencoded({ extended: true }))
app.use(bodyParser.json())
app.use(bodyParser.urlencoded({ extended: true }))
app.use(cors())

const db = mysql.createConnection({
    host: "localhost",
    user: "root",
    password: "",
    database: "olshop"
})

db.connect(error => {
    if (error) {
        console.log(error.message)
    } else {
        console.log("MySQL Connected")
    }
})

app.listen(8000, () => {
    console.log("Server run on port 8000")
})

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, './image')
    },
    filename: (req, file, cb) => {
        cb(null, "image-" + Date.now() + path.extname(file.originalname))
    }
})

let upload = multer({ storage: storage })

const foto = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, './profile')
    },
    filename: (req, file, cb) => {
        cb(null, "image-" + Date.now() + path.extname(file.originalname))
    }
})

let upload2 = multer({ storage: foto })
let response = null
let message

function errFunc(error, result, message) {
    if (error) {
        response = {
            message: error.message
        }
    } else {
        response = {
            message: result.affectedRows + message
        }
    }
}

function errTamp(error, result) {
    if (error) {
        response = {
            message: error.message
        }
    } else {
        response = {
            data: result,
            count: result.length
        }
    }
}

app.post("/barang", upload.single("image"), (req, res) => {
    let data = {
        nama_barang: req.body.nama_barang,
        harga: req.body.harga,
        stok: req.body.stok,
        deskripsi: req.body.deskripsi,
        image: req.file.filename
    }
    if (!req.file) {
        res.json({
            message: "tidak ada file dikriim"
        })
    } else {
        let sql = "insert into barang set ?"

        db.query(sql, data, (error, result) => {
            message = " data ditambahkan"
            errFunc(error, result, message)
            res.json(response)
        })
    }
})

function deleteFile(sql, param) {
    db.query(sql, param, (error, result) => {
        if (error) throw error
        let fileName = result[0].image
        let dir = path.join(__dirname, "image", fileName)
        fs.unlink(dir, (error) => { })
    })
}

app.put("/barang", upload.single("image"), (req, res) => {
    let data = null
    let sql = null
    let param = { kode_barang: req.body.kode_barang }

    if (!req.file) {
        data = {
            nama_barang: req.body.nama_barang,
            harga: req.body.harga,
            stok: req.body.stok,
            deskripsi: req.body.deskripsi
        }
    } else {
        data = {
            nama_barang: req.body.nama_barang,
            harga: req.body.harga,
            stok: req.body.stok,
            deskripsi: req.body.deskripsi,
            image: req.file.filename 
        }
        sql = "select * from barang where ?"
        deleteFile(sql, param)

    }
    sql = "update barang set ? where ?"
    db.query(sql, [data, param], (error, result) => {
        message = "data diupdate"
        errFunc(error, result, message)
        res.json(response)
    })
})

app.delete("/barang/:kode_barang", (req, res) => {
    let param = { kode_barang: req.params.kode_barang }
    let sql = "select * from barang where ?"
    deleteFile(sql, param)
    sql = "delete from barang where ?"
    db.query(sql, param, (error, result) => {
        message = " data dihapus"
        errFunc(error, result, message)
        res.json(response)
    })
})

app.get("/barang", (req, res) => {
    let sql = "select * from barang"
    db.query(sql, (error, result) => {
        errTamp(error, result)
        res.json(response)
    })
})

app.post("/admin", (req, res) => {
    let data = {
        nama_admin: req.body.nama_admin,
        username: req.body.username,
        password: md5(req.body.password)
    }
    let sql = "insert into admin set ?"
    db.query(sql, data, (error, result) => {
        message = " data inserted"
        errFunc(error, result, message)
        res.json(response)
    })
})

app.put("/admin", (req, res) => {
    let data = {
        id_admin: req.body.id_admin,
        nama_admin: req.body.nama_admin,
        username: req.body.username,
        password: md5(req.body.password)
    }
    let param = { id_admin: req.body.id_admin }
    let sql = "update admin set ? where ?"
    db.query(sql, [data, param], (error, result) => {
        message = " data diupdate"
        errFunc(error, result, message)
        res.json(response)
    })
})

app.delete("/admin/:id_admin", (req, res) => {
    let param = {
        id_admin: req.params.id_admin
    }
    let sql = "delete from admin where ?"
    db.query(sql, param, (error, result) => {
        message = " data admin dihapus"
        errFunc(error, result, message)
        res.json(response)
    })
})

app.post("/users", upload2.single("foto"), (req, res) => {
    let data = {
        id_users: req.body.id_users,
        nama_users: req.body.nama_users,
        alamat: req.body.alamat,
        foto: req.file.filename,
        username: req.body.username,
        password: md5(req.body.password)
    }

    if (!req.file) {
        res.json({
            message: "tidak ada file dikirim"
        })
    } else {
        let sql = "insert into users set ?"

        db.query(sql, data, (error, result) => {
            message = " data ditambahkan"
            errFunc(error, result, message)
            res.json(response)
        })
    }
})

function deleteFile2(sql, param) {
    db.query(sql, param, (error, result) => {
        if (error) throw error
        let fileName = result[0].foto
        let dir = path.join(__dirname, "prof", fileName)
        fs.unlink(dir, (error) => { })
    })
}

app.put("/users", upload2.single("foto"), (req, res) => {
    let param = { id_users: req.body.id_users }
    let data = null
    let sql = null
    if (!req.file) {
        data = {
            nama_users: req.body.nama_users,
            alamat: req.body.alamat,
            username: req.body.username,
            password: md5(req.body.password)
        }
    } else {
        data = {
            nama_users: req.body.nama_users,
            alamat: req.body.alamat,
            foto: req.file.filename,
            username: req.body.username,
            password: md5(req.body.password)
        }

        sql = "select * from users where ?"
        deleteFile2(sql, param)
    }
    sql = "update users set ? where ?"
    db.query(sql, [data, param], (error, result) => {
        message = " Data diupdate"
        errFunc(error, result, message)
        res.json(response)
    })
})

app.delete("/users/:id_users", (req, res) => {
    let param = { id_users: req.params.id_users }
    let sql = "select * from users where ?"
    deleteFile2(sql, param)
    sql = "delete from users where ?"
    db.query(sql, param, (error, result) => {
        message = " data dihapus"
        errFunc(error, result, message)
        res.json(response)
    })
})

app.get("/users", (req, res) => {
    let sql = "select * from users"
    db.query(sql, (error, result) => {
        errTamp(error, result)
        res.json(response)
    })
})

app.post("/transaksi", (req, res) => {
    let data = {
        kode_transaksi: req.body.kode_transaksi,
        id_users: req.body.id_users,
        tgl_transaksi: formatDatetime
    }
    let sql = "insert into transaksi set ?"
    db.query(sql, data, (error, result) => {
        if (error) {
            res.json({ message: error.message })
        } else {
            res.json({
                message: "Kode transaksi dibuat"
            })
        }
    })
})

app.post("/detail-transaksi", (req, res) => {
    let kode_barang = req.body.kode_barang
    let param_barang = {
        kode_barang : kode_barang
    }
    let harga = null
    let jumlah = req.body.jumlah
    let sql1 = "select * from barang where ?"

    db.query(sql1, param_barang, (error, result) => {
        if (error) {
            res.json({ message: error.message })
        } else {
            var string = JSON.stringify(result)
            var json = JSON.parse(string)
            harga = json[0].harga * jumlah
            let detail = {
                kode_transaksi: req.body.kode_transaksi,
                kode_barang: req.body.kode_barang,
                jumlah: req.body.jumlah,
                harga_beli: harga
            }

            let sql3 = "insert into detail-transaksi set ?"
            db.query(sql3, detail, (error, result) => {
                message = " transaksi berhasil"
                errFunc(error, result, message)
                res.json(response)
            })
            let decrement = [
                { stok: json[0].stok - jumlah },
                { kode_barang: kode_barang }
            ]
            let sql4 = "update barang set ? where ?"
            db.query(sql4, decrement, (error, result) => {
            })
        }
    })


})

app.get("/cetak/:kode_transaksi", (req, res) => {
    let param = {
        kode_transaksi: req.params.kode_transaksi
    }
    let data = []

    let sqlPembeli = "SELECT t.kode_transaksi,t.tgl_transaksi,u.nama_users,u.alamat FROM users u JOIN transaksi t ON u.id_users = t.id_users WHERE t.?"
    db.query(sqlPembeli, param, (error,result)=>{
        if(error){
            res.json({
                alert: "Error pembeli",
                message: error.message
            })
        }else{
            data.push(result)
            let sqlBarang = "SELECT b.nama_barang, d.jumlah, d.harga_beli FROM barang b JOIN detail-transaksi d ON b.kode_barang = d.kode_barang WHERE d.?"
            db.query(sqlBarang,param,(error,result)=>{
                if(error){
                    res.json({
                        alert: "Error barang",
                        message: error.message
                    })
                }else{
                    data.push(result)
                    var barangLength = result.length
                    var string = JSON.stringify(result)
                    var json = JSON.parse(string)
                    var totalHarga = 0
                    for (let index = 0; index<barangLength;index++){
                        totalHarga += json[index].harga_beli
                    }
                    data.push({
                        TOTAL: totalHarga
                    })
                    res.json(data)
                }
            })
        }
    })
})

